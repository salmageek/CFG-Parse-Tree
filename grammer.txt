Goal ::= MainClass ( ClassDeclaration )* <EOF>

MainClass ::= "class" Identifier "{" "public" "static" "void" "main" "(" "String" "[" "]" Identifier ")" "{" Statement "}" "}"

ClassDeclaration ::= "class" Identifier ( "extends" Identifier )? "{" ( VarDeclaration )* 
					( ConstructorDeclaration )* ( MethodDeclaration )* "}"

VarDeclaration ::= Type Identifier ";"

ConstructorDeclaration::= Identifier "(" ( Type Identifier ( "," Type Identifier )*)? ")"
						"{" ( VarDeclaration )* ( Statement )* "}"

MethodDeclaration ::= ("public" | "private" | "protected") Type Identifier
					"(" ( Type Identifier ( "," Type Identifier )*)? ")"
					"{" ( VarDeclaration )* ( Statement )* "return" Expression ";" "}"

Type ::= "int" "[" "]"
		| "boolean"
		| "int"
		| "float" | "String" | "char" | "float" "[" "]"
		| "String" "[" "]"
		| "char" "[" "]"
		| "boolean" "[" "]"

Expression -> <INTEGRAL_LITERAL> Expression''
			| <FLOAT_LITERAL> Expression''
			| "true" Expression''
			| "false" Expression''
			| Identifier Expression''
			| "this" Expression''
			| "new" ExpressionNew
			| "!" Expression Expression''
			| "(" Expression ")" Expression''


Expression''-> Expression' Expression'' | E

Expression' -> ( "&&" | "||" | "==" | "!=" | ">" | "<" | "<=" | ">="| "+" | "-" | "*" | "/" ) Expression
			-> "[" Expression "]"
			-> "." ExpressionDot

ExpressionDot -> "length" 
				| Identifier "(" ( Expression ( "," Expression )* )? ")"

ExpressionNew -> ("int" | "float" | "String" | "char" | "boolean" ) "[" Expression "]" Expression''
				| Identifier "(" (Expression ( "," Expression)*)? ")" Expression''



Statement ->  "{" ( Statement )* "}"
			| if "(" Expression ")" Statement ElseStatement
			| "while" "(" Expression ")" Statement
			| "System.out.println" "(" Expression ")" ";"
			| Identifier StatementDash

ElseStatement -> else Statement | E

StatementDash -> "=" Expression ";" | "[" Expression "]" "=" Expression ";"

Identifier ::= <IDENTIFIER>