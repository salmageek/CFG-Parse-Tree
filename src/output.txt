CLASS : class
ID : id
LEFT_CURLY_B : {
PUBLIC : public
STATIC : static
VOID : void
MAIN : main
LEFT_ROUND_B : (
STRING : String
LEFT_SQUARE_B : [
RIGHT_SQUARE_B : ]
ID : args
RIGHT_ROUND_B : )
LEFT_CURLY_B : {
LEFT_CURLY_B : {
RIGHT_CURLY_B : }
RIGHT_CURLY_B : }
RIGHT_CURLY_B : }
CLASS : class
ID : id
EXTENDS : extends
ID : id2
LEFT_CURLY_B : {
INT : int
ID : i
SEMICOLON : ;
STRING : String
ID : s
SEMICOLON : ;
ID : khadega
LEFT_ROUND_B : (
RIGHT_ROUND_B : )
LEFT_CURLY_B : {
RIGHT_CURLY_B : }
PRIVATE : private
INT : int
ID : fun
LEFT_ROUND_B : (
INT : int
ID : x
COMMA : ,
STRING : String
ID : x
COMMA : ,
FLOAT : float
ID : y
RIGHT_ROUND_B : )
LEFT_CURLY_B : {
INT : int
ID : z
SEMICOLON : ;
IF : if
LEFT_ROUND_B : (
ID : x
PLUS : +
INTEGRAL_LITERAL : 2
RIGHT_ROUND_B : )
WHILE : while
LEFT_ROUND_B : (
TRUE : true
RIGHT_ROUND_B : )
ID : x
ASSIGNMENT : =
ID : x
PLUS : +
INTEGRAL_LITERAL : 1
SEMICOLON : ;
ELSE : else
LEFT_CURLY_B : {
RIGHT_CURLY_B : }
RETURN : return
TRUE : true
EQUAL : ==
TRUE : true
SEMICOLON : ;
RIGHT_CURLY_B : }
RIGHT_CURLY_B : }
EOF : eof
