CLASS : class
ID : foo
LEFT_CURLY_B : {
PUBLIC : public
STATIC : static
VOID : void
MAIN : main
LEFT_ROUND_B : (
STRING : String
LEFT_SQUARE_B : [
RIGHT_SQUARE_B : ]
ID : args
RIGHT_ROUND_B : )
LEFT_CURLY_B : {
LEFT_CURLY_B : {
LEFT_CURLY_B : {
RIGHT_CURLY_B : }
IF : if
LEFT_ROUND_B : (
INTEGRAL_LITERAL : 1
LESS_EQ : <=
INTEGRAL_LITERAL : 0
RIGHT_ROUND_B : )
WHILE : while
LEFT_ROUND_B : (
ID : x
LESSTHAN : <
ID : y
RIGHT_ROUND_B : )
LEFT_CURLY_B : {
ID : bobo
ASSIGNMENT : =
ID : soso
SEMICOLON : ;
RIGHT_CURLY_B : }
ELSE : else
LEFT_CURLY_B : {
SYSTEM.OUT.PRINTLN : System.out.println
LEFT_ROUND_B : (
ID : khokha
RIGHT_ROUND_B : )
SEMICOLON : ;
ID : bobo
LEFT_SQUARE_B : [
ID : x
PLUS : +
INTEGRAL_LITERAL : 2
RIGHT_SQUARE_B : ]
ASSIGNMENT : =
ID : soso
MULTIPLY : *
INTEGRAL_LITERAL : 2
SEMICOLON : ;
RIGHT_CURLY_B : }
ID : soso
LEFT_SQUARE_B : [
NEW : new
INT : int
LEFT_SQUARE_B : [
INTEGRAL_LITERAL : 0
RIGHT_SQUARE_B : ]
RIGHT_SQUARE_B : ]
ASSIGNMENT : =
TRUE : true
DOT : .
ID : x
LEFT_ROUND_B : (
LEFT_ROUND_B : (
NOT : !
ID : bobo
RIGHT_ROUND_B : )
COMMA : ,
FALSE : false
COMMA : ,
THIS : this
RIGHT_ROUND_B : )
SEMICOLON : ;
RIGHT_CURLY_B : }
RIGHT_CURLY_B : }
RIGHT_CURLY_B : }
CLASS : class
ID : kdkdkkdkd
EOF : eof
